import { NextResponse } from 'next/server'

function haversine(lat1:number, lon1:number, lat2:number, lon2:number){ const R=6371000; const toRad=(x:number)=>x*Math.PI/180; const dLat=toRad(lat2-lat1); const dLon=toRad(lon2-lon1); const a=Math.sin(dLat/2)**2+Math.cos(toRad(lat1))*Math.cos(toRad(lat2))*Math.sin(dLon/2)**2; const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)); return R*c }

export async function GET(req:Request){ const {searchParams}=new URL(req.url); const lat=parseFloat(searchParams.get('lat')||'0'); const lng=parseFloat(searchParams.get('lng')||'0'); const radius=1500; if(!lat||!lng) return NextResponse.json([], {status:400}); const q=`[out:json][timeout:25];(node(around:${radius},${lat},${lng})[railway=station][station=subway];node(around:${radius},${lat},${lng})[railway=station][subway=yes];node(around:${radius},${lat},${lng})[public_transport=station][station=subway];);out body;`;
  try{ const res=await fetch('https://overpass-api.de/api/interpreter',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:new URLSearchParams({data:q})}); if(!res.ok) return NextResponse.json([]); const data=await res.json(); const elements=(data?.elements??[]) as any[]; const stations=elements.map((e:any)=>{ const name=e.tags?.name||e.tags?.['name:ko']||e.tags?.['station']||'지하철역'; const lat2=e.lat, lng2=e.lon; return {id:String(e.id),name,lat:lat2,lng:lng2,distance:haversine(lat,lng,lat2,lng2)} }).sort((a:any,b:any)=>a.distance-b.distance); const seen=new Set<string>(); const unique=stations.filter((s:any)=>{const k=s.name; if(seen.has(k)) return false; seen.add(k); return true})
  return NextResponse.json(unique.slice(0,50)) } catch { return NextResponse.json([]) } }
